// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_top,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.942500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=584,HLS_SYN_LUT=1084,HLS_VERSION=2019_1}" *)

module hls_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] g_6;
reg   [7:0] crc32_tab_address0;
reg    crc32_tab_ce0;
reg    crc32_tab_we0;
wire   [31:0] crc32_tab_q0;
reg   [31:0] g_3;
reg   [31:0] checksum_hercules;
reg   [31:0] crc32_context;
reg   [2:0] g_5_address0;
reg    g_5_ce0;
wire   [31:0] g_5_q0;
wire   [31:0] zext_ln58_fu_186_p1;
wire    ap_CS_fsm_state2;
wire   [8:0] i_1_fu_196_p2;
reg   [8:0] i_1_reg_411;
reg   [25:0] trunc_ln2_reg_423;
wire   [0:0] icmp_ln57_fu_190_p2;
wire   [0:0] icmp_ln49_fu_236_p2;
reg   [0:0] icmp_ln49_reg_428;
wire   [31:0] crc_4_fu_277_p3;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln59_fu_247_p2;
wire   [3:0] j_fu_285_p2;
wire   [0:0] icmp_ln51_fu_314_p2;
reg   [0:0] icmp_ln51_reg_448;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_1_fu_296_p3;
wire   [31:0] l_18_fu_346_p1;
reg   [31:0] l_18_reg_453;
wire    ap_CS_fsm_state5;
wire   [1:0] add_ln44_fu_364_p2;
wire    ap_CS_fsm_state7;
reg   [31:0] g_3_load_reg_464;
wire    ap_CS_fsm_state8;
wire   [3:0] i_fu_376_p2;
reg   [3:0] i_reg_472;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln243_fu_370_p2;
reg   [31:0] g_5_load_reg_482;
wire    ap_CS_fsm_state13;
wire    grp_transparent_crc_fu_165_ap_start;
wire    grp_transparent_crc_fu_165_ap_done;
wire    grp_transparent_crc_fu_165_ap_idle;
wire    grp_transparent_crc_fu_165_ap_ready;
reg   [31:0] grp_transparent_crc_fu_165_val_r;
wire   [31:0] grp_transparent_crc_fu_165_crc32_context_o;
wire    grp_transparent_crc_fu_165_crc32_context_o_ap_vld;
wire   [7:0] grp_transparent_crc_fu_165_crc32_tab_address0;
wire    grp_transparent_crc_fu_165_crc32_tab_ce0;
reg   [8:0] crc_reg_109;
reg   [3:0] j_0_i_reg_121;
reg   [31:0] crc_0_i_reg_132;
reg   [1:0] storemerge_i_reg_142;
reg   [3:0] i_0_reg_154;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
reg    grp_transparent_crc_fu_165_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln66_fu_291_p1;
wire   [63:0] zext_ln245_fu_382_p1;
wire   [31:0] add_ln48_fu_334_p2;
wire   [31:0] add_ln52_fu_349_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state16;
reg   [31:0] l_18_1_fu_78;
wire   [30:0] trunc_ln937_fu_206_p1;
wire   [30:0] add_ln49_fu_220_p2;
wire   [29:0] tmp_fu_226_p4;
wire   [30:0] crc_1_fu_253_p4;
wire   [31:0] crc_2_fu_263_p1;
wire   [0:0] trunc_ln59_fu_273_p1;
wire   [31:0] crc_3_fu_267_p2;
wire   [25:0] zext_ln51_fu_310_p1;
wire   [31:0] xor_ln250_fu_391_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 g_6 = 32'd1744352479;
#0 g_3 = 32'd1;
#0 checksum_hercules = 32'd0;
#0 crc32_context = 32'd4294967295;
#0 grp_transparent_crc_fu_165_ap_start_reg = 1'b0;
end

hls_top_crc32_tab #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
crc32_tab_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(crc32_tab_address0),
    .ce0(crc32_tab_ce0),
    .we0(crc32_tab_we0),
    .d0(crc_0_i_reg_132),
    .q0(crc32_tab_q0)
);

hls_top_g_5 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
g_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(g_5_address0),
    .ce0(g_5_ce0),
    .q0(g_5_q0)
);

transparent_crc grp_transparent_crc_fu_165(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_transparent_crc_fu_165_ap_start),
    .ap_done(grp_transparent_crc_fu_165_ap_done),
    .ap_idle(grp_transparent_crc_fu_165_ap_idle),
    .ap_ready(grp_transparent_crc_fu_165_ap_ready),
    .val_r(grp_transparent_crc_fu_165_val_r),
    .crc32_context_i(crc32_context),
    .crc32_context_o(grp_transparent_crc_fu_165_crc32_context_o),
    .crc32_context_o_ap_vld(grp_transparent_crc_fu_165_crc32_context_o_ap_vld),
    .crc32_tab_address0(grp_transparent_crc_fu_165_crc32_tab_address0),
    .crc32_tab_ce0(grp_transparent_crc_fu_165_crc32_tab_ce0),
    .crc32_tab_q0(crc32_tab_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_transparent_crc_fu_165_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln243_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)))) begin
            grp_transparent_crc_fu_165_ap_start_reg <= 1'b1;
        end else if ((grp_transparent_crc_fu_165_ap_ready == 1'b1)) begin
            grp_transparent_crc_fu_165_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        checksum_hercules <= add_ln52_fu_349_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        checksum_hercules <= add_ln48_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        crc_0_i_reg_132 <= zext_ln58_fu_186_p1;
    end else if (((icmp_ln59_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        crc_0_i_reg_132 <= crc_4_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        crc_reg_109 <= i_1_reg_411;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        crc_reg_109 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((tmp_1_fu_296_p3 == 1'd1)) begin
            g_3 <= l_18_1_fu_78;
        end else if ((tmp_1_fu_296_p3 == 1'd0)) begin
            g_3 <= g_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((grp_transparent_crc_fu_165_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            i_0_reg_154 <= i_reg_472;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            i_0_reg_154 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_reg_121 <= 4'd8;
    end else if (((icmp_ln59_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_i_reg_121 <= j_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
                l_18_1_fu_78[0] <= l_18_reg_453[0];
        l_18_1_fu_78[3] <= l_18_reg_453[3];
        l_18_1_fu_78[6] <= l_18_reg_453[6];
        l_18_1_fu_78[9] <= l_18_reg_453[9];
        l_18_1_fu_78[12] <= l_18_reg_453[12];
        l_18_1_fu_78[16 : 15] <= l_18_reg_453[16 : 15];
        l_18_1_fu_78[19 : 18] <= l_18_reg_453[19 : 18];
        l_18_1_fu_78[22] <= l_18_reg_453[22];
        l_18_1_fu_78[26 : 25] <= l_18_reg_453[26 : 25];
        l_18_1_fu_78[29] <= l_18_reg_453[29];
    end else if (((icmp_ln57_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                l_18_1_fu_78[0] <= 1'b0;
        l_18_1_fu_78[3] <= 1'b1;
        l_18_1_fu_78[6] <= 1'b1;
        l_18_1_fu_78[9] <= 1'b1;
        l_18_1_fu_78[12] <= 1'b1;
        l_18_1_fu_78[15] <= 1'b1;
        l_18_1_fu_78[16] <= 1'b1;
        l_18_1_fu_78[18] <= 1'b1;
        l_18_1_fu_78[19] <= 1'b1;
        l_18_1_fu_78[22] <= 1'b1;
        l_18_1_fu_78[25] <= 1'b1;
        l_18_1_fu_78[26] <= 1'b1;
        l_18_1_fu_78[29] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        storemerge_i_reg_142 <= 2'd1;
    end else if (((icmp_ln49_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        storemerge_i_reg_142 <= add_ln44_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state15) & (grp_transparent_crc_fu_165_crc32_context_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (grp_transparent_crc_fu_165_crc32_context_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (grp_transparent_crc_fu_165_crc32_context_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & (grp_transparent_crc_fu_165_crc32_context_o_ap_vld == 1'b1)))) begin
        crc32_context <= grp_transparent_crc_fu_165_crc32_context_o;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        g_3_load_reg_464 <= g_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        g_5_load_reg_482 <= g_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_296_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        g_6[0] <= 1'b0;
g_6[1] <= 1'b0;
g_6[2] <= 1'b0;
g_6[3] <= 1'b0;
g_6[4] <= 1'b0;
g_6[6] <= 1'b0;
g_6[7] <= 1'b0;
g_6[10] <= 1'b0;
g_6[12] <= 1'b0;
g_6[13] <= 1'b0;
g_6[15] <= 1'b0;
g_6[19] <= 1'b0;
g_6[20] <= 1'b0;
g_6[21] <= 1'b0;
g_6[22] <= 1'b0;
g_6[23] <= 1'b0;
g_6[24] <= 1'b0;
g_6[25] <= 1'b0;
g_6[26] <= 1'b0;
g_6[29] <= 1'b0;
g_6[30] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_411 <= i_1_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_472 <= i_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln49_reg_428 <= icmp_ln49_fu_236_p2;
        trunc_ln2_reg_423 <= {{g_6[30:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_296_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln51_reg_448 <= icmp_ln51_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        l_18_reg_453[0] <= l_18_fu_346_p1[0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        crc32_tab_address0 = zext_ln66_fu_291_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11))) begin
        crc32_tab_address0 = grp_transparent_crc_fu_165_crc32_tab_address0;
    end else begin
        crc32_tab_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        crc32_tab_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11))) begin
        crc32_tab_ce0 = grp_transparent_crc_fu_165_crc32_tab_ce0;
    end else begin
        crc32_tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        crc32_tab_we0 = 1'b1;
    end else begin
        crc32_tab_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        g_5_address0 = zext_ln245_fu_382_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        g_5_address0 = 3'd3;
    end else begin
        g_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        g_5_ce0 = 1'b1;
    end else begin
        g_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_transparent_crc_fu_165_val_r = g_5_load_reg_482;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_transparent_crc_fu_165_val_r = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_transparent_crc_fu_165_val_r = 32'd4294967295;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_transparent_crc_fu_165_val_r = g_3_load_reg_464;
    end else begin
        grp_transparent_crc_fu_165_val_r = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln57_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln59_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_1_fu_296_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln49_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_transparent_crc_fu_165_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_transparent_crc_fu_165_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln243_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_transparent_crc_fu_165_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (grp_transparent_crc_fu_165_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_364_p2 = ($signed(storemerge_i_reg_142) + $signed(2'd3));

assign add_ln48_fu_334_p2 = (checksum_hercules + g_3);

assign add_ln49_fu_220_p2 = (31'd1 + trunc_ln937_fu_206_p1);

assign add_ln52_fu_349_p2 = (checksum_hercules + l_18_reg_453);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = (checksum_hercules + xor_ln250_fu_391_p2);

assign crc_1_fu_253_p4 = {{crc_0_i_reg_132[31:1]}};

assign crc_2_fu_263_p1 = crc_1_fu_253_p4;

assign crc_3_fu_267_p2 = (crc_2_fu_263_p1 ^ 32'd3988292384);

assign crc_4_fu_277_p3 = ((trunc_ln59_fu_273_p1[0:0] === 1'b1) ? crc_3_fu_267_p2 : crc_2_fu_263_p1);

assign grp_transparent_crc_fu_165_ap_start = grp_transparent_crc_fu_165_ap_start_reg;

assign i_1_fu_196_p2 = (crc_reg_109 + 9'd1);

assign i_fu_376_p2 = (i_0_reg_154 + 4'd1);

assign icmp_ln243_fu_370_p2 = ((i_0_reg_154 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_236_p2 = ((tmp_fu_226_p4 == 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_314_p2 = ((trunc_ln2_reg_423 < zext_ln51_fu_310_p1) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_190_p2 = ((crc_reg_109 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_247_p2 = ((j_0_i_reg_121 == 4'd0) ? 1'b1 : 1'b0);

assign j_fu_285_p2 = ($signed(4'd15) + $signed(j_0_i_reg_121));

assign l_18_fu_346_p1 = icmp_ln51_reg_448;

assign tmp_1_fu_296_p3 = storemerge_i_reg_142[32'd1];

assign tmp_fu_226_p4 = {{add_ln49_fu_220_p2[30:1]}};

assign trunc_ln59_fu_273_p1 = crc_0_i_reg_132[0:0];

assign trunc_ln937_fu_206_p1 = g_6[30:0];

assign xor_ln250_fu_391_p2 = (crc32_context ^ 32'd4294967295);

assign zext_ln245_fu_382_p1 = i_0_reg_154;

assign zext_ln51_fu_310_p1 = storemerge_i_reg_142;

assign zext_ln58_fu_186_p1 = crc_reg_109;

assign zext_ln66_fu_291_p1 = crc_reg_109;

always @ (posedge ap_clk) begin
    g_6[5] <= 1'b0;
    g_6[9:8] <= 2'b00;
    g_6[11:11] <= 1'b0;
    g_6[14:14] <= 1'b0;
    g_6[18:16] <= 3'b000;
    g_6[28:27] <= 2'b00;
    g_6[31] <= 1'b0;
    l_18_reg_453[31:1] <= 31'b0000000000000000000000000000000;
    l_18_1_fu_78[2:1] <= 2'b00;
    l_18_1_fu_78[5:4] <= 2'b00;
    l_18_1_fu_78[8:7] <= 2'b00;
    l_18_1_fu_78[11:10] <= 2'b00;
    l_18_1_fu_78[14:13] <= 2'b00;
    l_18_1_fu_78[17:17] <= 1'b0;
    l_18_1_fu_78[21:20] <= 2'b00;
    l_18_1_fu_78[24:23] <= 2'b00;
    l_18_1_fu_78[28:27] <= 2'b00;
    l_18_1_fu_78[31:30] <= 2'b00;
end

endmodule //hls_top
