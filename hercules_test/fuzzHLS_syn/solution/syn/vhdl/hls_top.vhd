-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hls_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_top,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.942500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=584,HLS_SYN_LUT=1084,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_264D9248 : STD_LOGIC_VECTOR (31 downto 0) := "00100110010011011001001001001000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_EDB88320 : STD_LOGIC_VECTOR (31 downto 0) := "11101101101110001000001100100000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal g_6 : STD_LOGIC_VECTOR (31 downto 0) := "01100111111110001011010011011111";
    signal crc32_tab_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crc32_tab_ce0 : STD_LOGIC;
    signal crc32_tab_we0 : STD_LOGIC;
    signal crc32_tab_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    signal checksum_hercules : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal crc32_context : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    signal g_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal g_5_ce0 : STD_LOGIC;
    signal g_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln58_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_411 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln2_reg_423 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln57_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal crc_4_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln59_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln51_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_18_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_18_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln44_fu_364_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal g_3_load_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln243_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_5_load_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_transparent_crc_fu_165_ap_start : STD_LOGIC;
    signal grp_transparent_crc_fu_165_ap_done : STD_LOGIC;
    signal grp_transparent_crc_fu_165_ap_idle : STD_LOGIC;
    signal grp_transparent_crc_fu_165_ap_ready : STD_LOGIC;
    signal grp_transparent_crc_fu_165_val_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transparent_crc_fu_165_crc32_context_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transparent_crc_fu_165_crc32_context_o_ap_vld : STD_LOGIC;
    signal grp_transparent_crc_fu_165_crc32_tab_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_transparent_crc_fu_165_crc32_tab_ce0 : STD_LOGIC;
    signal crc_reg_109 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_i_reg_121 : STD_LOGIC_VECTOR (3 downto 0);
    signal crc_0_i_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_i_reg_142 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_transparent_crc_fu_165_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln66_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln245_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal l_18_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln937_fu_206_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln49_fu_220_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_226_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal crc_1_fu_253_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal crc_2_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln59_fu_273_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal crc_3_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_fu_310_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln250_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component transparent_crc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_r : IN STD_LOGIC_VECTOR (31 downto 0);
        crc32_context_i : IN STD_LOGIC_VECTOR (31 downto 0);
        crc32_context_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        crc32_context_o_ap_vld : OUT STD_LOGIC;
        crc32_tab_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        crc32_tab_ce0 : OUT STD_LOGIC;
        crc32_tab_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_top_crc32_tab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_top_g_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    crc32_tab_U : component hls_top_crc32_tab
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => crc32_tab_address0,
        ce0 => crc32_tab_ce0,
        we0 => crc32_tab_we0,
        d0 => crc_0_i_reg_132,
        q0 => crc32_tab_q0);

    g_5_U : component hls_top_g_5
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_5_address0,
        ce0 => g_5_ce0,
        q0 => g_5_q0);

    grp_transparent_crc_fu_165 : component transparent_crc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_transparent_crc_fu_165_ap_start,
        ap_done => grp_transparent_crc_fu_165_ap_done,
        ap_idle => grp_transparent_crc_fu_165_ap_idle,
        ap_ready => grp_transparent_crc_fu_165_ap_ready,
        val_r => grp_transparent_crc_fu_165_val_r,
        crc32_context_i => crc32_context,
        crc32_context_o => grp_transparent_crc_fu_165_crc32_context_o,
        crc32_context_o_ap_vld => grp_transparent_crc_fu_165_crc32_context_o_ap_vld,
        crc32_tab_address0 => grp_transparent_crc_fu_165_crc32_tab_address0,
        crc32_tab_ce0 => grp_transparent_crc_fu_165_crc32_tab_ce0,
        crc32_tab_q0 => crc32_tab_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_transparent_crc_fu_165_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_transparent_crc_fu_165_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln243_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    grp_transparent_crc_fu_165_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_transparent_crc_fu_165_ap_ready = ap_const_logic_1)) then 
                    grp_transparent_crc_fu_165_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    checksum_hercules_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                checksum_hercules <= add_ln52_fu_349_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                checksum_hercules <= add_ln48_fu_334_p2;
            end if; 
        end if;
    end process;

    crc_0_i_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                crc_0_i_reg_132 <= zext_ln58_fu_186_p1;
            elsif (((icmp_ln59_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                crc_0_i_reg_132 <= crc_4_fu_277_p3;
            end if; 
        end if;
    end process;

    crc_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                crc_reg_109 <= i_1_reg_411;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                crc_reg_109 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    g_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((tmp_1_fu_296_p3 = ap_const_lv1_1)) then 
                    g_3 <= l_18_1_fu_78;
                elsif ((tmp_1_fu_296_p3 = ap_const_lv1_0)) then 
                    g_3 <= g_3;
                end if;
            end if; 
        end if;
    end process;

    i_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_transparent_crc_fu_165_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    i_0_reg_154 <= i_reg_472;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    i_0_reg_154 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    j_0_i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_reg_121 <= ap_const_lv4_8;
            elsif (((icmp_ln59_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_i_reg_121 <= j_fu_285_p2;
            end if; 
        end if;
    end process;

    l_18_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                                l_18_1_fu_78(0) <= l_18_reg_453(0);                l_18_1_fu_78(3) <= l_18_reg_453(3);                l_18_1_fu_78(6) <= l_18_reg_453(6);                l_18_1_fu_78(9) <= l_18_reg_453(9);                l_18_1_fu_78(12) <= l_18_reg_453(12);                l_18_1_fu_78(16 downto 15) <= l_18_reg_453(16 downto 15);                l_18_1_fu_78(19 downto 18) <= l_18_reg_453(19 downto 18);                l_18_1_fu_78(22) <= l_18_reg_453(22);                l_18_1_fu_78(26 downto 25) <= l_18_reg_453(26 downto 25);                l_18_1_fu_78(29) <= l_18_reg_453(29);
            elsif (((icmp_ln57_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                l_18_1_fu_78(0) <= '0';
                l_18_1_fu_78(3) <= '1';
                l_18_1_fu_78(6) <= '1';
                l_18_1_fu_78(9) <= '1';
                l_18_1_fu_78(12) <= '1';
                l_18_1_fu_78(15) <= '1';
                l_18_1_fu_78(16) <= '1';
                l_18_1_fu_78(18) <= '1';
                l_18_1_fu_78(19) <= '1';
                l_18_1_fu_78(22) <= '1';
                l_18_1_fu_78(25) <= '1';
                l_18_1_fu_78(26) <= '1';
                l_18_1_fu_78(29) <= '1';
            end if; 
        end if;
    end process;

    storemerge_i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                storemerge_i_reg_142 <= ap_const_lv2_1;
            elsif (((icmp_ln49_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                storemerge_i_reg_142 <= add_ln44_fu_364_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_transparent_crc_fu_165_crc32_context_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_transparent_crc_fu_165_crc32_context_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_transparent_crc_fu_165_crc32_context_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_transparent_crc_fu_165_crc32_context_o_ap_vld = ap_const_logic_1)))) then
                crc32_context <= grp_transparent_crc_fu_165_crc32_context_o;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                g_3_load_reg_464 <= g_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                g_5_load_reg_482 <= g_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_296_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                g_6(0) <= '0';
    g_6(1) <= '0';
    g_6(2) <= '0';
    g_6(3) <= '0';
    g_6(4) <= '0';
    g_6(6) <= '0';
    g_6(7) <= '0';
    g_6(10) <= '0';
    g_6(12) <= '0';
    g_6(13) <= '0';
    g_6(15) <= '0';
    g_6(19) <= '0';
    g_6(20) <= '0';
    g_6(21) <= '0';
    g_6(22) <= '0';
    g_6(23) <= '0';
    g_6(24) <= '0';
    g_6(25) <= '0';
    g_6(26) <= '0';
    g_6(29) <= '0';
    g_6(30) <= '0';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_411 <= i_1_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_reg_472 <= i_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln49_reg_428 <= icmp_ln49_fu_236_p2;
                trunc_ln2_reg_423 <= g_6(30 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_296_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln51_reg_448 <= icmp_ln51_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    l_18_reg_453(0) <= l_18_fu_346_p1(0);
            end if;
        end if;
    end process;
    g_6(5) <= '0';
    g_6(9 downto 8) <= "00";
    g_6(11 downto 11) <= "0";
    g_6(14 downto 14) <= "0";
    g_6(18 downto 16) <= "000";
    g_6(28 downto 27) <= "00";
    g_6(31) <= '0';
    l_18_reg_453(31 downto 1) <= "0000000000000000000000000000000";
    l_18_1_fu_78(2 downto 1) <= "00";
    l_18_1_fu_78(5 downto 4) <= "00";
    l_18_1_fu_78(8 downto 7) <= "00";
    l_18_1_fu_78(11 downto 10) <= "00";
    l_18_1_fu_78(14 downto 13) <= "00";
    l_18_1_fu_78(17 downto 17) <= "0";
    l_18_1_fu_78(21 downto 20) <= "00";
    l_18_1_fu_78(24 downto 23) <= "00";
    l_18_1_fu_78(28 downto 27) <= "00";
    l_18_1_fu_78(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln57_fu_190_p2, icmp_ln49_reg_428, ap_CS_fsm_state3, icmp_ln59_fu_247_p2, ap_CS_fsm_state4, tmp_1_fu_296_p3, ap_CS_fsm_state7, ap_CS_fsm_state12, icmp_ln243_fu_370_p2, grp_transparent_crc_fu_165_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln57_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln59_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_1_fu_296_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln49_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_transparent_crc_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_transparent_crc_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln243_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_transparent_crc_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_transparent_crc_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln44_fu_364_p2 <= std_logic_vector(unsigned(storemerge_i_reg_142) + unsigned(ap_const_lv2_3));
    add_ln48_fu_334_p2 <= std_logic_vector(unsigned(checksum_hercules) + unsigned(g_3));
    add_ln49_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(trunc_ln937_fu_206_p1));
    add_ln52_fu_349_p2 <= std_logic_vector(unsigned(checksum_hercules) + unsigned(l_18_reg_453));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(checksum_hercules) + unsigned(xor_ln250_fu_391_p2));

    crc32_tab_address0_assign_proc : process(ap_CS_fsm_state3, grp_transparent_crc_fu_165_crc32_tab_address0, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln66_fu_291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            crc32_tab_address0 <= zext_ln66_fu_291_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            crc32_tab_address0 <= grp_transparent_crc_fu_165_crc32_tab_address0;
        else 
            crc32_tab_address0 <= "XXXXXXXX";
        end if; 
    end process;


    crc32_tab_ce0_assign_proc : process(ap_CS_fsm_state3, grp_transparent_crc_fu_165_crc32_tab_ce0, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            crc32_tab_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            crc32_tab_ce0 <= grp_transparent_crc_fu_165_crc32_tab_ce0;
        else 
            crc32_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    crc32_tab_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln59_fu_247_p2)
    begin
        if (((icmp_ln59_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            crc32_tab_we0 <= ap_const_logic_1;
        else 
            crc32_tab_we0 <= ap_const_logic_0;
        end if; 
    end process;

    crc_1_fu_253_p4 <= crc_0_i_reg_132(31 downto 1);
    crc_2_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(crc_1_fu_253_p4),32));
    crc_3_fu_267_p2 <= (crc_2_fu_263_p1 xor ap_const_lv32_EDB88320);
    crc_4_fu_277_p3 <= 
        crc_3_fu_267_p2 when (trunc_ln59_fu_273_p1(0) = '1') else 
        crc_2_fu_263_p1;

    g_5_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln245_fu_382_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            g_5_address0 <= zext_ln245_fu_382_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_5_address0 <= ap_const_lv3_3;
        else 
            g_5_address0 <= "XXX";
        end if; 
    end process;


    g_5_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            g_5_ce0 <= ap_const_logic_1;
        else 
            g_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_transparent_crc_fu_165_ap_start <= grp_transparent_crc_fu_165_ap_start_reg;

    grp_transparent_crc_fu_165_val_r_assign_proc : process(g_3_load_reg_464, g_5_load_reg_482, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_transparent_crc_fu_165_val_r <= g_5_load_reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_transparent_crc_fu_165_val_r <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_transparent_crc_fu_165_val_r <= ap_const_lv32_FFFFFFFF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_transparent_crc_fu_165_val_r <= g_3_load_reg_464;
        else 
            grp_transparent_crc_fu_165_val_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_196_p2 <= std_logic_vector(unsigned(crc_reg_109) + unsigned(ap_const_lv9_1));
    i_fu_376_p2 <= std_logic_vector(unsigned(i_0_reg_154) + unsigned(ap_const_lv4_1));
    icmp_ln243_fu_370_p2 <= "1" when (i_0_reg_154 = ap_const_lv4_8) else "0";
    icmp_ln49_fu_236_p2 <= "1" when (tmp_fu_226_p4 = ap_const_lv30_0) else "0";
    icmp_ln51_fu_314_p2 <= "1" when (unsigned(trunc_ln2_reg_423) < unsigned(zext_ln51_fu_310_p1)) else "0";
    icmp_ln57_fu_190_p2 <= "1" when (crc_reg_109 = ap_const_lv9_100) else "0";
    icmp_ln59_fu_247_p2 <= "1" when (j_0_i_reg_121 = ap_const_lv4_0) else "0";
    j_fu_285_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(j_0_i_reg_121));
    l_18_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln51_reg_448),32));
    tmp_1_fu_296_p3 <= storemerge_i_reg_142(1 downto 1);
    tmp_fu_226_p4 <= add_ln49_fu_220_p2(30 downto 1);
    trunc_ln59_fu_273_p1 <= crc_0_i_reg_132(1 - 1 downto 0);
    trunc_ln937_fu_206_p1 <= g_6(31 - 1 downto 0);
    xor_ln250_fu_391_p2 <= (crc32_context xor ap_const_lv32_FFFFFFFF);
    zext_ln245_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_154),64));
    zext_ln51_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_i_reg_142),26));
    zext_ln58_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(crc_reg_109),32));
    zext_ln66_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(crc_reg_109),64));
end behav;
