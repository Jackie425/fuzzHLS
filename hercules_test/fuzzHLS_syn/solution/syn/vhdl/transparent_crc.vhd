-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transparent_crc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_r : IN STD_LOGIC_VECTOR (31 downto 0);
    crc32_context_i : IN STD_LOGIC_VECTOR (31 downto 0);
    crc32_context_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    crc32_context_o_ap_vld : OUT STD_LOGIC;
    crc32_tab_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    crc32_tab_ce0 : OUT STD_LOGIC;
    crc32_tab_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of transparent_crc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal lshr_ln_reg_560 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln72_1_reg_580 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln72_2_reg_590 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln72_3_reg_600 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln103_fu_348_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln103_reg_605 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln72_4_reg_617 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln72_5_reg_627 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln72_11_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_11_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_1_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_2_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_3_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_4_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_5_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_6_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_7_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln72_15_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln72_fu_119_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln99_fu_111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_fu_133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_2_fu_161_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_1_fu_152_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln100_fu_165_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_1_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_2_fu_180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_8_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_1_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_4_fu_220_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_3_fu_210_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln101_fu_224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_2_fu_230_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_4_fu_239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_9_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_3_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_6_fu_279_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_5_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln102_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_3_fu_289_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_6_fu_298_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_10_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_5_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_8_fu_338_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_7_fu_328_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln103_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_8_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_11_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_7_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_11_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_9_fu_385_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_10_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_12_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_9_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_13_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_s_fu_434_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_12_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_13_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_14_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_10_fu_473_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln106_fu_487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln72_14_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln72_6_fu_503_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln72_14_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln72_13_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln72_7_fu_522_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln72_15_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                lshr_ln72_1_reg_580 <= xor_ln72_1_fu_194_p2(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                lshr_ln72_2_reg_590 <= xor_ln72_3_fu_253_p2(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                lshr_ln72_3_reg_600 <= xor_ln72_5_fu_312_p2(31 downto 8);
                select_ln103_reg_605 <= select_ln103_fu_348_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                lshr_ln72_4_reg_617 <= xor_ln72_7_fu_369_p2(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                lshr_ln72_5_reg_627 <= xor_ln72_9_fu_418_p2(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                lshr_ln_reg_560 <= crc32_context_i(31 downto 8);
                tmp_reg_570 <= val_r(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_107 <= crc32_tab_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                xor_ln72_11_reg_637 <= xor_ln72_11_fu_467_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_1_fu_171_p4 <= val_r(15 downto 8);
    b_assign_2_fu_230_p4 <= val_r(23 downto 16);
    b_assign_3_fu_289_p4 <= val_r(31 downto 24);

    crc32_context_o_assign_proc : process(crc32_context_i, xor_ln72_15_fu_536_p2, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            crc32_context_o <= xor_ln72_15_fu_536_p2;
        else 
            crc32_context_o <= crc32_context_i;
        end if; 
    end process;


    crc32_context_o_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            crc32_context_o_ap_vld <= ap_const_logic_1;
        else 
            crc32_context_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    crc32_tab_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln72_fu_139_p1, zext_ln72_1_fu_186_p1, zext_ln72_2_fu_245_p1, zext_ln72_3_fu_304_p1, zext_ln72_4_fu_361_p1, zext_ln72_5_fu_410_p1, zext_ln72_6_fu_459_p1, zext_ln72_7_fu_498_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            crc32_tab_address0 <= zext_ln72_7_fu_498_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            crc32_tab_address0 <= zext_ln72_6_fu_459_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            crc32_tab_address0 <= zext_ln72_5_fu_410_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            crc32_tab_address0 <= zext_ln72_4_fu_361_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crc32_tab_address0 <= zext_ln72_3_fu_304_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            crc32_tab_address0 <= zext_ln72_2_fu_245_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            crc32_tab_address0 <= zext_ln72_1_fu_186_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            crc32_tab_address0 <= zext_ln72_fu_139_p1(8 - 1 downto 0);
        else 
            crc32_tab_address0 <= "XXXXXXXX";
        end if; 
    end process;


    crc32_tab_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            crc32_tab_ce0 <= ap_const_logic_1;
        else 
            crc32_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln72_6_fu_503_p4 <= xor_ln72_11_reg_637(31 downto 8);
    lshr_ln72_7_fu_522_p4 <= xor_ln72_13_fu_516_p2(31 downto 8);
    select_ln103_fu_348_p3 <= 
        ap_const_lv8_FF when (tmp_reg_570(0) = '1') else 
        ap_const_lv8_0;
    trunc_ln72_10_fu_473_p4 <= xor_ln72_11_fu_467_p2(15 downto 8);
    trunc_ln72_11_fu_395_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_13_fu_444_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_14_fu_483_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_1_fu_152_p4 <= crc32_context_i(15 downto 8);
    trunc_ln72_2_fu_161_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_3_fu_210_p4 <= xor_ln72_1_fu_194_p2(15 downto 8);
    trunc_ln72_4_fu_220_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_5_fu_269_p4 <= xor_ln72_3_fu_253_p2(15 downto 8);
    trunc_ln72_6_fu_279_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_7_fu_328_p4 <= xor_ln72_5_fu_312_p2(15 downto 8);
    trunc_ln72_8_fu_338_p1 <= crc32_tab_q0(8 - 1 downto 0);
    trunc_ln72_9_fu_385_p4 <= xor_ln72_7_fu_369_p2(15 downto 8);
    trunc_ln72_fu_119_p1 <= crc32_context_i(8 - 1 downto 0);
    trunc_ln72_s_fu_434_p4 <= xor_ln72_9_fu_418_p2(15 downto 8);
    trunc_ln99_fu_111_p1 <= val_r(8 - 1 downto 0);
    xor_ln100_fu_165_p2 <= (trunc_ln72_2_fu_161_p1 xor trunc_ln72_1_fu_152_p4);
    xor_ln101_fu_224_p2 <= (trunc_ln72_4_fu_220_p1 xor trunc_ln72_3_fu_210_p4);
    xor_ln102_fu_283_p2 <= (trunc_ln72_6_fu_279_p1 xor trunc_ln72_5_fu_269_p4);
    xor_ln103_fu_342_p2 <= (trunc_ln72_8_fu_338_p1 xor trunc_ln72_7_fu_328_p4);
    xor_ln104_fu_399_p2 <= (trunc_ln72_9_fu_385_p4 xor trunc_ln72_11_fu_395_p1);
    xor_ln105_fu_448_p2 <= (trunc_ln72_s_fu_434_p4 xor trunc_ln72_13_fu_444_p1);
    xor_ln106_fu_487_p2 <= (trunc_ln72_14_fu_483_p1 xor trunc_ln72_10_fu_473_p4);
    xor_ln72_10_fu_405_p2 <= (xor_ln104_fu_399_p2 xor select_ln103_reg_605);
    xor_ln72_11_fu_467_p2 <= (zext_ln72_13_fu_464_p1 xor reg_107);
    xor_ln72_12_fu_454_p2 <= (xor_ln105_fu_448_p2 xor select_ln103_reg_605);
    xor_ln72_13_fu_516_p2 <= (zext_ln72_14_fu_512_p1 xor reg_107);
    xor_ln72_14_fu_493_p2 <= (xor_ln106_fu_487_p2 xor select_ln103_reg_605);
    xor_ln72_15_fu_536_p2 <= (zext_ln72_15_fu_532_p1 xor crc32_tab_q0);
    xor_ln72_1_fu_194_p2 <= (zext_ln72_8_fu_191_p1 xor reg_107);
    xor_ln72_2_fu_180_p2 <= (xor_ln100_fu_165_p2 xor b_assign_1_fu_171_p4);
    xor_ln72_3_fu_253_p2 <= (zext_ln72_9_fu_250_p1 xor reg_107);
    xor_ln72_4_fu_239_p2 <= (xor_ln101_fu_224_p2 xor b_assign_2_fu_230_p4);
    xor_ln72_5_fu_312_p2 <= (zext_ln72_10_fu_309_p1 xor reg_107);
    xor_ln72_6_fu_298_p2 <= (xor_ln102_fu_283_p2 xor b_assign_3_fu_289_p4);
    xor_ln72_7_fu_369_p2 <= (zext_ln72_11_fu_366_p1 xor reg_107);
    xor_ln72_8_fu_355_p2 <= (xor_ln103_fu_342_p2 xor select_ln103_fu_348_p3);
    xor_ln72_9_fu_418_p2 <= (zext_ln72_12_fu_415_p1 xor reg_107);
    xor_ln72_fu_133_p2 <= (trunc_ln99_fu_111_p1 xor trunc_ln72_fu_119_p1);
    zext_ln72_10_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_2_reg_590),32));
    zext_ln72_11_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_3_reg_600),32));
    zext_ln72_12_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_4_reg_617),32));
    zext_ln72_13_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_5_reg_627),32));
    zext_ln72_14_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_6_fu_503_p4),32));
    zext_ln72_15_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_7_fu_522_p4),32));
    zext_ln72_1_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_2_fu_180_p2),64));
    zext_ln72_2_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_4_fu_239_p2),64));
    zext_ln72_3_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_6_fu_298_p2),64));
    zext_ln72_4_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_8_fu_355_p2),64));
    zext_ln72_5_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_10_fu_405_p2),64));
    zext_ln72_6_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_12_fu_454_p2),64));
    zext_ln72_7_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_14_fu_493_p2),64));
    zext_ln72_8_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_560),32));
    zext_ln72_9_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_1_reg_580),32));
    zext_ln72_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_fu_133_p2),64));
end behav;
