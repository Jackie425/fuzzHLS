// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "transparent_crc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic transparent_crc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic transparent_crc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> transparent_crc::ap_ST_fsm_state1 = "1";
const sc_lv<9> transparent_crc::ap_ST_fsm_state2 = "10";
const sc_lv<9> transparent_crc::ap_ST_fsm_state3 = "100";
const sc_lv<9> transparent_crc::ap_ST_fsm_state4 = "1000";
const sc_lv<9> transparent_crc::ap_ST_fsm_state5 = "10000";
const sc_lv<9> transparent_crc::ap_ST_fsm_state6 = "100000";
const sc_lv<9> transparent_crc::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> transparent_crc::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> transparent_crc::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> transparent_crc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> transparent_crc::ap_const_lv32_1 = "1";
const sc_lv<32> transparent_crc::ap_const_lv32_2 = "10";
const sc_lv<32> transparent_crc::ap_const_lv32_3 = "11";
const sc_lv<32> transparent_crc::ap_const_lv32_4 = "100";
const sc_lv<32> transparent_crc::ap_const_lv32_5 = "101";
const sc_lv<32> transparent_crc::ap_const_lv32_6 = "110";
const sc_lv<32> transparent_crc::ap_const_lv32_7 = "111";
const sc_lv<32> transparent_crc::ap_const_lv32_8 = "1000";
const sc_lv<32> transparent_crc::ap_const_lv32_1F = "11111";
const sc_lv<32> transparent_crc::ap_const_lv32_F = "1111";
const sc_lv<32> transparent_crc::ap_const_lv32_10 = "10000";
const sc_lv<32> transparent_crc::ap_const_lv32_17 = "10111";
const sc_lv<32> transparent_crc::ap_const_lv32_18 = "11000";
const sc_lv<8> transparent_crc::ap_const_lv8_FF = "11111111";
const sc_lv<8> transparent_crc::ap_const_lv8_0 = "00000000";
const bool transparent_crc::ap_const_boolean_1 = true;

transparent_crc::transparent_crc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_b_assign_1_fu_171_p4);
    sensitive << ( val_r );

    SC_METHOD(thread_b_assign_2_fu_230_p4);
    sensitive << ( val_r );

    SC_METHOD(thread_b_assign_3_fu_289_p4);
    sensitive << ( val_r );

    SC_METHOD(thread_crc32_context_o);
    sensitive << ( crc32_context_i );
    sensitive << ( xor_ln72_15_fu_536_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_crc32_context_o_ap_vld);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_crc32_tab_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln72_fu_139_p1 );
    sensitive << ( zext_ln72_1_fu_186_p1 );
    sensitive << ( zext_ln72_2_fu_245_p1 );
    sensitive << ( zext_ln72_3_fu_304_p1 );
    sensitive << ( zext_ln72_4_fu_361_p1 );
    sensitive << ( zext_ln72_5_fu_410_p1 );
    sensitive << ( zext_ln72_6_fu_459_p1 );
    sensitive << ( zext_ln72_7_fu_498_p1 );

    SC_METHOD(thread_crc32_tab_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_lshr_ln72_6_fu_503_p4);
    sensitive << ( xor_ln72_11_reg_637 );

    SC_METHOD(thread_lshr_ln72_7_fu_522_p4);
    sensitive << ( xor_ln72_13_fu_516_p2 );

    SC_METHOD(thread_select_ln103_fu_348_p3);
    sensitive << ( tmp_reg_570 );

    SC_METHOD(thread_trunc_ln72_10_fu_473_p4);
    sensitive << ( xor_ln72_11_fu_467_p2 );

    SC_METHOD(thread_trunc_ln72_11_fu_395_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_13_fu_444_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_14_fu_483_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_1_fu_152_p4);
    sensitive << ( crc32_context_i );

    SC_METHOD(thread_trunc_ln72_2_fu_161_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_3_fu_210_p4);
    sensitive << ( xor_ln72_1_fu_194_p2 );

    SC_METHOD(thread_trunc_ln72_4_fu_220_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_5_fu_269_p4);
    sensitive << ( xor_ln72_3_fu_253_p2 );

    SC_METHOD(thread_trunc_ln72_6_fu_279_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_7_fu_328_p4);
    sensitive << ( xor_ln72_5_fu_312_p2 );

    SC_METHOD(thread_trunc_ln72_8_fu_338_p1);
    sensitive << ( crc32_tab_q0 );

    SC_METHOD(thread_trunc_ln72_9_fu_385_p4);
    sensitive << ( xor_ln72_7_fu_369_p2 );

    SC_METHOD(thread_trunc_ln72_fu_119_p1);
    sensitive << ( crc32_context_i );

    SC_METHOD(thread_trunc_ln72_s_fu_434_p4);
    sensitive << ( xor_ln72_9_fu_418_p2 );

    SC_METHOD(thread_trunc_ln99_fu_111_p1);
    sensitive << ( val_r );

    SC_METHOD(thread_xor_ln100_fu_165_p2);
    sensitive << ( trunc_ln72_2_fu_161_p1 );
    sensitive << ( trunc_ln72_1_fu_152_p4 );

    SC_METHOD(thread_xor_ln101_fu_224_p2);
    sensitive << ( trunc_ln72_4_fu_220_p1 );
    sensitive << ( trunc_ln72_3_fu_210_p4 );

    SC_METHOD(thread_xor_ln102_fu_283_p2);
    sensitive << ( trunc_ln72_6_fu_279_p1 );
    sensitive << ( trunc_ln72_5_fu_269_p4 );

    SC_METHOD(thread_xor_ln103_fu_342_p2);
    sensitive << ( trunc_ln72_8_fu_338_p1 );
    sensitive << ( trunc_ln72_7_fu_328_p4 );

    SC_METHOD(thread_xor_ln104_fu_399_p2);
    sensitive << ( trunc_ln72_11_fu_395_p1 );
    sensitive << ( trunc_ln72_9_fu_385_p4 );

    SC_METHOD(thread_xor_ln105_fu_448_p2);
    sensitive << ( trunc_ln72_13_fu_444_p1 );
    sensitive << ( trunc_ln72_s_fu_434_p4 );

    SC_METHOD(thread_xor_ln106_fu_487_p2);
    sensitive << ( trunc_ln72_14_fu_483_p1 );
    sensitive << ( trunc_ln72_10_fu_473_p4 );

    SC_METHOD(thread_xor_ln72_10_fu_405_p2);
    sensitive << ( select_ln103_reg_605 );
    sensitive << ( xor_ln104_fu_399_p2 );

    SC_METHOD(thread_xor_ln72_11_fu_467_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_13_fu_464_p1 );

    SC_METHOD(thread_xor_ln72_12_fu_454_p2);
    sensitive << ( select_ln103_reg_605 );
    sensitive << ( xor_ln105_fu_448_p2 );

    SC_METHOD(thread_xor_ln72_13_fu_516_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_14_fu_512_p1 );

    SC_METHOD(thread_xor_ln72_14_fu_493_p2);
    sensitive << ( select_ln103_reg_605 );
    sensitive << ( xor_ln106_fu_487_p2 );

    SC_METHOD(thread_xor_ln72_15_fu_536_p2);
    sensitive << ( crc32_tab_q0 );
    sensitive << ( zext_ln72_15_fu_532_p1 );

    SC_METHOD(thread_xor_ln72_1_fu_194_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_8_fu_191_p1 );

    SC_METHOD(thread_xor_ln72_2_fu_180_p2);
    sensitive << ( xor_ln100_fu_165_p2 );
    sensitive << ( b_assign_1_fu_171_p4 );

    SC_METHOD(thread_xor_ln72_3_fu_253_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_9_fu_250_p1 );

    SC_METHOD(thread_xor_ln72_4_fu_239_p2);
    sensitive << ( xor_ln101_fu_224_p2 );
    sensitive << ( b_assign_2_fu_230_p4 );

    SC_METHOD(thread_xor_ln72_5_fu_312_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_10_fu_309_p1 );

    SC_METHOD(thread_xor_ln72_6_fu_298_p2);
    sensitive << ( xor_ln102_fu_283_p2 );
    sensitive << ( b_assign_3_fu_289_p4 );

    SC_METHOD(thread_xor_ln72_7_fu_369_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_11_fu_366_p1 );

    SC_METHOD(thread_xor_ln72_8_fu_355_p2);
    sensitive << ( select_ln103_fu_348_p3 );
    sensitive << ( xor_ln103_fu_342_p2 );

    SC_METHOD(thread_xor_ln72_9_fu_418_p2);
    sensitive << ( reg_107 );
    sensitive << ( zext_ln72_12_fu_415_p1 );

    SC_METHOD(thread_xor_ln72_fu_133_p2);
    sensitive << ( trunc_ln72_fu_119_p1 );
    sensitive << ( trunc_ln99_fu_111_p1 );

    SC_METHOD(thread_zext_ln72_10_fu_309_p1);
    sensitive << ( lshr_ln72_2_reg_590 );

    SC_METHOD(thread_zext_ln72_11_fu_366_p1);
    sensitive << ( lshr_ln72_3_reg_600 );

    SC_METHOD(thread_zext_ln72_12_fu_415_p1);
    sensitive << ( lshr_ln72_4_reg_617 );

    SC_METHOD(thread_zext_ln72_13_fu_464_p1);
    sensitive << ( lshr_ln72_5_reg_627 );

    SC_METHOD(thread_zext_ln72_14_fu_512_p1);
    sensitive << ( lshr_ln72_6_fu_503_p4 );

    SC_METHOD(thread_zext_ln72_15_fu_532_p1);
    sensitive << ( lshr_ln72_7_fu_522_p4 );

    SC_METHOD(thread_zext_ln72_1_fu_186_p1);
    sensitive << ( xor_ln72_2_fu_180_p2 );

    SC_METHOD(thread_zext_ln72_2_fu_245_p1);
    sensitive << ( xor_ln72_4_fu_239_p2 );

    SC_METHOD(thread_zext_ln72_3_fu_304_p1);
    sensitive << ( xor_ln72_6_fu_298_p2 );

    SC_METHOD(thread_zext_ln72_4_fu_361_p1);
    sensitive << ( xor_ln72_8_fu_355_p2 );

    SC_METHOD(thread_zext_ln72_5_fu_410_p1);
    sensitive << ( xor_ln72_10_fu_405_p2 );

    SC_METHOD(thread_zext_ln72_6_fu_459_p1);
    sensitive << ( xor_ln72_12_fu_454_p2 );

    SC_METHOD(thread_zext_ln72_7_fu_498_p1);
    sensitive << ( xor_ln72_14_fu_493_p2 );

    SC_METHOD(thread_zext_ln72_8_fu_191_p1);
    sensitive << ( lshr_ln_reg_560 );

    SC_METHOD(thread_zext_ln72_9_fu_250_p1);
    sensitive << ( lshr_ln72_1_reg_580 );

    SC_METHOD(thread_zext_ln72_fu_139_p1);
    sensitive << ( xor_ln72_fu_133_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "transparent_crc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, val_r, "(port)val_r");
    sc_trace(mVcdFile, crc32_context_i, "(port)crc32_context_i");
    sc_trace(mVcdFile, crc32_context_o, "(port)crc32_context_o");
    sc_trace(mVcdFile, crc32_context_o_ap_vld, "(port)crc32_context_o_ap_vld");
    sc_trace(mVcdFile, crc32_tab_address0, "(port)crc32_tab_address0");
    sc_trace(mVcdFile, crc32_tab_ce0, "(port)crc32_tab_ce0");
    sc_trace(mVcdFile, crc32_tab_q0, "(port)crc32_tab_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_107, "reg_107");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, lshr_ln_reg_560, "lshr_ln_reg_560");
    sc_trace(mVcdFile, tmp_reg_570, "tmp_reg_570");
    sc_trace(mVcdFile, lshr_ln72_1_reg_580, "lshr_ln72_1_reg_580");
    sc_trace(mVcdFile, lshr_ln72_2_reg_590, "lshr_ln72_2_reg_590");
    sc_trace(mVcdFile, lshr_ln72_3_reg_600, "lshr_ln72_3_reg_600");
    sc_trace(mVcdFile, select_ln103_fu_348_p3, "select_ln103_fu_348_p3");
    sc_trace(mVcdFile, select_ln103_reg_605, "select_ln103_reg_605");
    sc_trace(mVcdFile, lshr_ln72_4_reg_617, "lshr_ln72_4_reg_617");
    sc_trace(mVcdFile, lshr_ln72_5_reg_627, "lshr_ln72_5_reg_627");
    sc_trace(mVcdFile, xor_ln72_11_fu_467_p2, "xor_ln72_11_fu_467_p2");
    sc_trace(mVcdFile, xor_ln72_11_reg_637, "xor_ln72_11_reg_637");
    sc_trace(mVcdFile, zext_ln72_fu_139_p1, "zext_ln72_fu_139_p1");
    sc_trace(mVcdFile, zext_ln72_1_fu_186_p1, "zext_ln72_1_fu_186_p1");
    sc_trace(mVcdFile, zext_ln72_2_fu_245_p1, "zext_ln72_2_fu_245_p1");
    sc_trace(mVcdFile, zext_ln72_3_fu_304_p1, "zext_ln72_3_fu_304_p1");
    sc_trace(mVcdFile, zext_ln72_4_fu_361_p1, "zext_ln72_4_fu_361_p1");
    sc_trace(mVcdFile, zext_ln72_5_fu_410_p1, "zext_ln72_5_fu_410_p1");
    sc_trace(mVcdFile, zext_ln72_6_fu_459_p1, "zext_ln72_6_fu_459_p1");
    sc_trace(mVcdFile, zext_ln72_7_fu_498_p1, "zext_ln72_7_fu_498_p1");
    sc_trace(mVcdFile, xor_ln72_15_fu_536_p2, "xor_ln72_15_fu_536_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln72_fu_119_p1, "trunc_ln72_fu_119_p1");
    sc_trace(mVcdFile, trunc_ln99_fu_111_p1, "trunc_ln99_fu_111_p1");
    sc_trace(mVcdFile, xor_ln72_fu_133_p2, "xor_ln72_fu_133_p2");
    sc_trace(mVcdFile, trunc_ln72_2_fu_161_p1, "trunc_ln72_2_fu_161_p1");
    sc_trace(mVcdFile, trunc_ln72_1_fu_152_p4, "trunc_ln72_1_fu_152_p4");
    sc_trace(mVcdFile, xor_ln100_fu_165_p2, "xor_ln100_fu_165_p2");
    sc_trace(mVcdFile, b_assign_1_fu_171_p4, "b_assign_1_fu_171_p4");
    sc_trace(mVcdFile, xor_ln72_2_fu_180_p2, "xor_ln72_2_fu_180_p2");
    sc_trace(mVcdFile, zext_ln72_8_fu_191_p1, "zext_ln72_8_fu_191_p1");
    sc_trace(mVcdFile, xor_ln72_1_fu_194_p2, "xor_ln72_1_fu_194_p2");
    sc_trace(mVcdFile, trunc_ln72_4_fu_220_p1, "trunc_ln72_4_fu_220_p1");
    sc_trace(mVcdFile, trunc_ln72_3_fu_210_p4, "trunc_ln72_3_fu_210_p4");
    sc_trace(mVcdFile, xor_ln101_fu_224_p2, "xor_ln101_fu_224_p2");
    sc_trace(mVcdFile, b_assign_2_fu_230_p4, "b_assign_2_fu_230_p4");
    sc_trace(mVcdFile, xor_ln72_4_fu_239_p2, "xor_ln72_4_fu_239_p2");
    sc_trace(mVcdFile, zext_ln72_9_fu_250_p1, "zext_ln72_9_fu_250_p1");
    sc_trace(mVcdFile, xor_ln72_3_fu_253_p2, "xor_ln72_3_fu_253_p2");
    sc_trace(mVcdFile, trunc_ln72_6_fu_279_p1, "trunc_ln72_6_fu_279_p1");
    sc_trace(mVcdFile, trunc_ln72_5_fu_269_p4, "trunc_ln72_5_fu_269_p4");
    sc_trace(mVcdFile, xor_ln102_fu_283_p2, "xor_ln102_fu_283_p2");
    sc_trace(mVcdFile, b_assign_3_fu_289_p4, "b_assign_3_fu_289_p4");
    sc_trace(mVcdFile, xor_ln72_6_fu_298_p2, "xor_ln72_6_fu_298_p2");
    sc_trace(mVcdFile, zext_ln72_10_fu_309_p1, "zext_ln72_10_fu_309_p1");
    sc_trace(mVcdFile, xor_ln72_5_fu_312_p2, "xor_ln72_5_fu_312_p2");
    sc_trace(mVcdFile, trunc_ln72_8_fu_338_p1, "trunc_ln72_8_fu_338_p1");
    sc_trace(mVcdFile, trunc_ln72_7_fu_328_p4, "trunc_ln72_7_fu_328_p4");
    sc_trace(mVcdFile, xor_ln103_fu_342_p2, "xor_ln103_fu_342_p2");
    sc_trace(mVcdFile, xor_ln72_8_fu_355_p2, "xor_ln72_8_fu_355_p2");
    sc_trace(mVcdFile, zext_ln72_11_fu_366_p1, "zext_ln72_11_fu_366_p1");
    sc_trace(mVcdFile, xor_ln72_7_fu_369_p2, "xor_ln72_7_fu_369_p2");
    sc_trace(mVcdFile, trunc_ln72_11_fu_395_p1, "trunc_ln72_11_fu_395_p1");
    sc_trace(mVcdFile, trunc_ln72_9_fu_385_p4, "trunc_ln72_9_fu_385_p4");
    sc_trace(mVcdFile, xor_ln104_fu_399_p2, "xor_ln104_fu_399_p2");
    sc_trace(mVcdFile, xor_ln72_10_fu_405_p2, "xor_ln72_10_fu_405_p2");
    sc_trace(mVcdFile, zext_ln72_12_fu_415_p1, "zext_ln72_12_fu_415_p1");
    sc_trace(mVcdFile, xor_ln72_9_fu_418_p2, "xor_ln72_9_fu_418_p2");
    sc_trace(mVcdFile, trunc_ln72_13_fu_444_p1, "trunc_ln72_13_fu_444_p1");
    sc_trace(mVcdFile, trunc_ln72_s_fu_434_p4, "trunc_ln72_s_fu_434_p4");
    sc_trace(mVcdFile, xor_ln105_fu_448_p2, "xor_ln105_fu_448_p2");
    sc_trace(mVcdFile, xor_ln72_12_fu_454_p2, "xor_ln72_12_fu_454_p2");
    sc_trace(mVcdFile, zext_ln72_13_fu_464_p1, "zext_ln72_13_fu_464_p1");
    sc_trace(mVcdFile, trunc_ln72_14_fu_483_p1, "trunc_ln72_14_fu_483_p1");
    sc_trace(mVcdFile, trunc_ln72_10_fu_473_p4, "trunc_ln72_10_fu_473_p4");
    sc_trace(mVcdFile, xor_ln106_fu_487_p2, "xor_ln106_fu_487_p2");
    sc_trace(mVcdFile, xor_ln72_14_fu_493_p2, "xor_ln72_14_fu_493_p2");
    sc_trace(mVcdFile, lshr_ln72_6_fu_503_p4, "lshr_ln72_6_fu_503_p4");
    sc_trace(mVcdFile, zext_ln72_14_fu_512_p1, "zext_ln72_14_fu_512_p1");
    sc_trace(mVcdFile, xor_ln72_13_fu_516_p2, "xor_ln72_13_fu_516_p2");
    sc_trace(mVcdFile, lshr_ln72_7_fu_522_p4, "lshr_ln72_7_fu_522_p4");
    sc_trace(mVcdFile, zext_ln72_15_fu_532_p1, "zext_ln72_15_fu_532_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

transparent_crc::~transparent_crc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void transparent_crc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        lshr_ln72_1_reg_580 = xor_ln72_1_fu_194_p2.read().range(31, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        lshr_ln72_2_reg_590 = xor_ln72_3_fu_253_p2.read().range(31, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        lshr_ln72_3_reg_600 = xor_ln72_5_fu_312_p2.read().range(31, 8);
        select_ln103_reg_605 = select_ln103_fu_348_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        lshr_ln72_4_reg_617 = xor_ln72_7_fu_369_p2.read().range(31, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        lshr_ln72_5_reg_627 = xor_ln72_9_fu_418_p2.read().range(31, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        lshr_ln_reg_560 = crc32_context_i.read().range(31, 8);
        tmp_reg_570 = val_r.read().range(31, 31);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_107 = crc32_tab_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        xor_ln72_11_reg_637 = xor_ln72_11_fu_467_p2.read();
    }
}

void transparent_crc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void transparent_crc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void transparent_crc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void transparent_crc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void transparent_crc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void transparent_crc::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void transparent_crc::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void transparent_crc::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void transparent_crc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void transparent_crc::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void transparent_crc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void transparent_crc::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void transparent_crc::thread_b_assign_1_fu_171_p4() {
    b_assign_1_fu_171_p4 = val_r.read().range(15, 8);
}

void transparent_crc::thread_b_assign_2_fu_230_p4() {
    b_assign_2_fu_230_p4 = val_r.read().range(23, 16);
}

void transparent_crc::thread_b_assign_3_fu_289_p4() {
    b_assign_3_fu_289_p4 = val_r.read().range(31, 24);
}

void transparent_crc::thread_crc32_context_o() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        crc32_context_o = xor_ln72_15_fu_536_p2.read();
    } else {
        crc32_context_o = crc32_context_i.read();
    }
}

void transparent_crc::thread_crc32_context_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        crc32_context_o_ap_vld = ap_const_logic_1;
    } else {
        crc32_context_o_ap_vld = ap_const_logic_0;
    }
}

void transparent_crc::thread_crc32_tab_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_7_fu_498_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_6_fu_459_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_5_fu_410_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_4_fu_361_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_3_fu_304_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_2_fu_245_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_1_fu_186_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        crc32_tab_address0 =  (sc_lv<8>) (zext_ln72_fu_139_p1.read());
    } else {
        crc32_tab_address0 = "XXXXXXXX";
    }
}

void transparent_crc::thread_crc32_tab_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        crc32_tab_ce0 = ap_const_logic_1;
    } else {
        crc32_tab_ce0 = ap_const_logic_0;
    }
}

void transparent_crc::thread_lshr_ln72_6_fu_503_p4() {
    lshr_ln72_6_fu_503_p4 = xor_ln72_11_reg_637.read().range(31, 8);
}

void transparent_crc::thread_lshr_ln72_7_fu_522_p4() {
    lshr_ln72_7_fu_522_p4 = xor_ln72_13_fu_516_p2.read().range(31, 8);
}

void transparent_crc::thread_select_ln103_fu_348_p3() {
    select_ln103_fu_348_p3 = (!tmp_reg_570.read()[0].is_01())? sc_lv<8>(): ((tmp_reg_570.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void transparent_crc::thread_trunc_ln72_10_fu_473_p4() {
    trunc_ln72_10_fu_473_p4 = xor_ln72_11_fu_467_p2.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln72_11_fu_395_p1() {
    trunc_ln72_11_fu_395_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_13_fu_444_p1() {
    trunc_ln72_13_fu_444_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_14_fu_483_p1() {
    trunc_ln72_14_fu_483_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_1_fu_152_p4() {
    trunc_ln72_1_fu_152_p4 = crc32_context_i.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln72_2_fu_161_p1() {
    trunc_ln72_2_fu_161_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_3_fu_210_p4() {
    trunc_ln72_3_fu_210_p4 = xor_ln72_1_fu_194_p2.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln72_4_fu_220_p1() {
    trunc_ln72_4_fu_220_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_5_fu_269_p4() {
    trunc_ln72_5_fu_269_p4 = xor_ln72_3_fu_253_p2.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln72_6_fu_279_p1() {
    trunc_ln72_6_fu_279_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_7_fu_328_p4() {
    trunc_ln72_7_fu_328_p4 = xor_ln72_5_fu_312_p2.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln72_8_fu_338_p1() {
    trunc_ln72_8_fu_338_p1 = crc32_tab_q0.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_9_fu_385_p4() {
    trunc_ln72_9_fu_385_p4 = xor_ln72_7_fu_369_p2.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln72_fu_119_p1() {
    trunc_ln72_fu_119_p1 = crc32_context_i.read().range(8-1, 0);
}

void transparent_crc::thread_trunc_ln72_s_fu_434_p4() {
    trunc_ln72_s_fu_434_p4 = xor_ln72_9_fu_418_p2.read().range(15, 8);
}

void transparent_crc::thread_trunc_ln99_fu_111_p1() {
    trunc_ln99_fu_111_p1 = val_r.read().range(8-1, 0);
}

void transparent_crc::thread_xor_ln100_fu_165_p2() {
    xor_ln100_fu_165_p2 = (trunc_ln72_2_fu_161_p1.read() ^ trunc_ln72_1_fu_152_p4.read());
}

void transparent_crc::thread_xor_ln101_fu_224_p2() {
    xor_ln101_fu_224_p2 = (trunc_ln72_4_fu_220_p1.read() ^ trunc_ln72_3_fu_210_p4.read());
}

void transparent_crc::thread_xor_ln102_fu_283_p2() {
    xor_ln102_fu_283_p2 = (trunc_ln72_6_fu_279_p1.read() ^ trunc_ln72_5_fu_269_p4.read());
}

void transparent_crc::thread_xor_ln103_fu_342_p2() {
    xor_ln103_fu_342_p2 = (trunc_ln72_8_fu_338_p1.read() ^ trunc_ln72_7_fu_328_p4.read());
}

void transparent_crc::thread_xor_ln104_fu_399_p2() {
    xor_ln104_fu_399_p2 = (trunc_ln72_11_fu_395_p1.read() ^ trunc_ln72_9_fu_385_p4.read());
}

void transparent_crc::thread_xor_ln105_fu_448_p2() {
    xor_ln105_fu_448_p2 = (trunc_ln72_13_fu_444_p1.read() ^ trunc_ln72_s_fu_434_p4.read());
}

void transparent_crc::thread_xor_ln106_fu_487_p2() {
    xor_ln106_fu_487_p2 = (trunc_ln72_14_fu_483_p1.read() ^ trunc_ln72_10_fu_473_p4.read());
}

void transparent_crc::thread_xor_ln72_10_fu_405_p2() {
    xor_ln72_10_fu_405_p2 = (xor_ln104_fu_399_p2.read() ^ select_ln103_reg_605.read());
}

void transparent_crc::thread_xor_ln72_11_fu_467_p2() {
    xor_ln72_11_fu_467_p2 = (reg_107.read() ^ zext_ln72_13_fu_464_p1.read());
}

void transparent_crc::thread_xor_ln72_12_fu_454_p2() {
    xor_ln72_12_fu_454_p2 = (xor_ln105_fu_448_p2.read() ^ select_ln103_reg_605.read());
}

void transparent_crc::thread_xor_ln72_13_fu_516_p2() {
    xor_ln72_13_fu_516_p2 = (reg_107.read() ^ zext_ln72_14_fu_512_p1.read());
}

void transparent_crc::thread_xor_ln72_14_fu_493_p2() {
    xor_ln72_14_fu_493_p2 = (xor_ln106_fu_487_p2.read() ^ select_ln103_reg_605.read());
}

void transparent_crc::thread_xor_ln72_15_fu_536_p2() {
    xor_ln72_15_fu_536_p2 = (crc32_tab_q0.read() ^ zext_ln72_15_fu_532_p1.read());
}

void transparent_crc::thread_xor_ln72_1_fu_194_p2() {
    xor_ln72_1_fu_194_p2 = (reg_107.read() ^ zext_ln72_8_fu_191_p1.read());
}

void transparent_crc::thread_xor_ln72_2_fu_180_p2() {
    xor_ln72_2_fu_180_p2 = (xor_ln100_fu_165_p2.read() ^ b_assign_1_fu_171_p4.read());
}

void transparent_crc::thread_xor_ln72_3_fu_253_p2() {
    xor_ln72_3_fu_253_p2 = (reg_107.read() ^ zext_ln72_9_fu_250_p1.read());
}

void transparent_crc::thread_xor_ln72_4_fu_239_p2() {
    xor_ln72_4_fu_239_p2 = (xor_ln101_fu_224_p2.read() ^ b_assign_2_fu_230_p4.read());
}

void transparent_crc::thread_xor_ln72_5_fu_312_p2() {
    xor_ln72_5_fu_312_p2 = (reg_107.read() ^ zext_ln72_10_fu_309_p1.read());
}

void transparent_crc::thread_xor_ln72_6_fu_298_p2() {
    xor_ln72_6_fu_298_p2 = (xor_ln102_fu_283_p2.read() ^ b_assign_3_fu_289_p4.read());
}

void transparent_crc::thread_xor_ln72_7_fu_369_p2() {
    xor_ln72_7_fu_369_p2 = (reg_107.read() ^ zext_ln72_11_fu_366_p1.read());
}

void transparent_crc::thread_xor_ln72_8_fu_355_p2() {
    xor_ln72_8_fu_355_p2 = (xor_ln103_fu_342_p2.read() ^ select_ln103_fu_348_p3.read());
}

void transparent_crc::thread_xor_ln72_9_fu_418_p2() {
    xor_ln72_9_fu_418_p2 = (reg_107.read() ^ zext_ln72_12_fu_415_p1.read());
}

void transparent_crc::thread_xor_ln72_fu_133_p2() {
    xor_ln72_fu_133_p2 = (trunc_ln72_fu_119_p1.read() ^ trunc_ln99_fu_111_p1.read());
}

void transparent_crc::thread_zext_ln72_10_fu_309_p1() {
    zext_ln72_10_fu_309_p1 = esl_zext<32,24>(lshr_ln72_2_reg_590.read());
}

void transparent_crc::thread_zext_ln72_11_fu_366_p1() {
    zext_ln72_11_fu_366_p1 = esl_zext<32,24>(lshr_ln72_3_reg_600.read());
}

void transparent_crc::thread_zext_ln72_12_fu_415_p1() {
    zext_ln72_12_fu_415_p1 = esl_zext<32,24>(lshr_ln72_4_reg_617.read());
}

void transparent_crc::thread_zext_ln72_13_fu_464_p1() {
    zext_ln72_13_fu_464_p1 = esl_zext<32,24>(lshr_ln72_5_reg_627.read());
}

void transparent_crc::thread_zext_ln72_14_fu_512_p1() {
    zext_ln72_14_fu_512_p1 = esl_zext<32,24>(lshr_ln72_6_fu_503_p4.read());
}

void transparent_crc::thread_zext_ln72_15_fu_532_p1() {
    zext_ln72_15_fu_532_p1 = esl_zext<32,24>(lshr_ln72_7_fu_522_p4.read());
}

void transparent_crc::thread_zext_ln72_1_fu_186_p1() {
    zext_ln72_1_fu_186_p1 = esl_zext<64,8>(xor_ln72_2_fu_180_p2.read());
}

void transparent_crc::thread_zext_ln72_2_fu_245_p1() {
    zext_ln72_2_fu_245_p1 = esl_zext<64,8>(xor_ln72_4_fu_239_p2.read());
}

void transparent_crc::thread_zext_ln72_3_fu_304_p1() {
    zext_ln72_3_fu_304_p1 = esl_zext<64,8>(xor_ln72_6_fu_298_p2.read());
}

void transparent_crc::thread_zext_ln72_4_fu_361_p1() {
    zext_ln72_4_fu_361_p1 = esl_zext<64,8>(xor_ln72_8_fu_355_p2.read());
}

void transparent_crc::thread_zext_ln72_5_fu_410_p1() {
    zext_ln72_5_fu_410_p1 = esl_zext<64,8>(xor_ln72_10_fu_405_p2.read());
}

void transparent_crc::thread_zext_ln72_6_fu_459_p1() {
    zext_ln72_6_fu_459_p1 = esl_zext<64,8>(xor_ln72_12_fu_454_p2.read());
}

void transparent_crc::thread_zext_ln72_7_fu_498_p1() {
    zext_ln72_7_fu_498_p1 = esl_zext<64,8>(xor_ln72_14_fu_493_p2.read());
}

void transparent_crc::thread_zext_ln72_8_fu_191_p1() {
    zext_ln72_8_fu_191_p1 = esl_zext<32,24>(lshr_ln_reg_560.read());
}

void transparent_crc::thread_zext_ln72_9_fu_250_p1() {
    zext_ln72_9_fu_250_p1 = esl_zext<32,24>(lshr_ln72_1_reg_580.read());
}

void transparent_crc::thread_zext_ln72_fu_139_p1() {
    zext_ln72_fu_139_p1 = esl_zext<64,8>(xor_ln72_fu_133_p2.read());
}

void transparent_crc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

