// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transparent_crc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        val_r,
        crc32_context_i,
        crc32_context_o,
        crc32_context_o_ap_vld,
        crc32_tab_address0,
        crc32_tab_ce0,
        crc32_tab_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] val_r;
input  [31:0] crc32_context_i;
output  [31:0] crc32_context_o;
output   crc32_context_o_ap_vld;
output  [7:0] crc32_tab_address0;
output   crc32_tab_ce0;
input  [31:0] crc32_tab_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] crc32_context_o;
reg crc32_context_o_ap_vld;
reg[7:0] crc32_tab_address0;
reg crc32_tab_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_107;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [23:0] lshr_ln_reg_560;
reg   [0:0] tmp_reg_570;
reg   [23:0] lshr_ln72_1_reg_580;
reg   [23:0] lshr_ln72_2_reg_590;
reg   [23:0] lshr_ln72_3_reg_600;
wire   [7:0] select_ln103_fu_348_p3;
reg   [7:0] select_ln103_reg_605;
reg   [23:0] lshr_ln72_4_reg_617;
reg   [23:0] lshr_ln72_5_reg_627;
wire   [31:0] xor_ln72_11_fu_467_p2;
reg   [31:0] xor_ln72_11_reg_637;
wire   [63:0] zext_ln72_fu_139_p1;
wire   [63:0] zext_ln72_1_fu_186_p1;
wire   [63:0] zext_ln72_2_fu_245_p1;
wire   [63:0] zext_ln72_3_fu_304_p1;
wire   [63:0] zext_ln72_4_fu_361_p1;
wire   [63:0] zext_ln72_5_fu_410_p1;
wire   [63:0] zext_ln72_6_fu_459_p1;
wire   [63:0] zext_ln72_7_fu_498_p1;
wire   [31:0] xor_ln72_15_fu_536_p2;
wire    ap_CS_fsm_state9;
wire   [7:0] trunc_ln72_fu_119_p1;
wire   [7:0] trunc_ln99_fu_111_p1;
wire   [7:0] xor_ln72_fu_133_p2;
wire   [7:0] trunc_ln72_2_fu_161_p1;
wire   [7:0] trunc_ln72_1_fu_152_p4;
wire   [7:0] xor_ln100_fu_165_p2;
wire   [7:0] b_assign_1_fu_171_p4;
wire   [7:0] xor_ln72_2_fu_180_p2;
wire   [31:0] zext_ln72_8_fu_191_p1;
wire   [31:0] xor_ln72_1_fu_194_p2;
wire   [7:0] trunc_ln72_4_fu_220_p1;
wire   [7:0] trunc_ln72_3_fu_210_p4;
wire   [7:0] xor_ln101_fu_224_p2;
wire   [7:0] b_assign_2_fu_230_p4;
wire   [7:0] xor_ln72_4_fu_239_p2;
wire   [31:0] zext_ln72_9_fu_250_p1;
wire   [31:0] xor_ln72_3_fu_253_p2;
wire   [7:0] trunc_ln72_6_fu_279_p1;
wire   [7:0] trunc_ln72_5_fu_269_p4;
wire   [7:0] xor_ln102_fu_283_p2;
wire   [7:0] b_assign_3_fu_289_p4;
wire   [7:0] xor_ln72_6_fu_298_p2;
wire   [31:0] zext_ln72_10_fu_309_p1;
wire   [31:0] xor_ln72_5_fu_312_p2;
wire   [7:0] trunc_ln72_8_fu_338_p1;
wire   [7:0] trunc_ln72_7_fu_328_p4;
wire   [7:0] xor_ln103_fu_342_p2;
wire   [7:0] xor_ln72_8_fu_355_p2;
wire   [31:0] zext_ln72_11_fu_366_p1;
wire   [31:0] xor_ln72_7_fu_369_p2;
wire   [7:0] trunc_ln72_11_fu_395_p1;
wire   [7:0] trunc_ln72_9_fu_385_p4;
wire   [7:0] xor_ln104_fu_399_p2;
wire   [7:0] xor_ln72_10_fu_405_p2;
wire   [31:0] zext_ln72_12_fu_415_p1;
wire   [31:0] xor_ln72_9_fu_418_p2;
wire   [7:0] trunc_ln72_13_fu_444_p1;
wire   [7:0] trunc_ln72_s_fu_434_p4;
wire   [7:0] xor_ln105_fu_448_p2;
wire   [7:0] xor_ln72_12_fu_454_p2;
wire   [31:0] zext_ln72_13_fu_464_p1;
wire   [7:0] trunc_ln72_14_fu_483_p1;
wire   [7:0] trunc_ln72_10_fu_473_p4;
wire   [7:0] xor_ln106_fu_487_p2;
wire   [7:0] xor_ln72_14_fu_493_p2;
wire   [23:0] lshr_ln72_6_fu_503_p4;
wire   [31:0] zext_ln72_14_fu_512_p1;
wire   [31:0] xor_ln72_13_fu_516_p2;
wire   [23:0] lshr_ln72_7_fu_522_p4;
wire   [31:0] zext_ln72_15_fu_532_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lshr_ln72_1_reg_580 <= {{xor_ln72_1_fu_194_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lshr_ln72_2_reg_590 <= {{xor_ln72_3_fu_253_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lshr_ln72_3_reg_600 <= {{xor_ln72_5_fu_312_p2[31:8]}};
        select_ln103_reg_605 <= select_ln103_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        lshr_ln72_4_reg_617 <= {{xor_ln72_7_fu_369_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        lshr_ln72_5_reg_627 <= {{xor_ln72_9_fu_418_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lshr_ln_reg_560 <= {{crc32_context_i[31:8]}};
        tmp_reg_570 <= val_r[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_107 <= crc32_tab_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xor_ln72_11_reg_637 <= xor_ln72_11_fu_467_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        crc32_context_o = xor_ln72_15_fu_536_p2;
    end else begin
        crc32_context_o = crc32_context_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        crc32_context_o_ap_vld = 1'b1;
    end else begin
        crc32_context_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        crc32_tab_address0 = zext_ln72_7_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        crc32_tab_address0 = zext_ln72_6_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        crc32_tab_address0 = zext_ln72_5_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        crc32_tab_address0 = zext_ln72_4_fu_361_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        crc32_tab_address0 = zext_ln72_3_fu_304_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        crc32_tab_address0 = zext_ln72_2_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        crc32_tab_address0 = zext_ln72_1_fu_186_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        crc32_tab_address0 = zext_ln72_fu_139_p1;
    end else begin
        crc32_tab_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        crc32_tab_ce0 = 1'b1;
    end else begin
        crc32_tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_assign_1_fu_171_p4 = {{val_r[15:8]}};

assign b_assign_2_fu_230_p4 = {{val_r[23:16]}};

assign b_assign_3_fu_289_p4 = {{val_r[31:24]}};

assign lshr_ln72_6_fu_503_p4 = {{xor_ln72_11_reg_637[31:8]}};

assign lshr_ln72_7_fu_522_p4 = {{xor_ln72_13_fu_516_p2[31:8]}};

assign select_ln103_fu_348_p3 = ((tmp_reg_570[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign trunc_ln72_10_fu_473_p4 = {{xor_ln72_11_fu_467_p2[15:8]}};

assign trunc_ln72_11_fu_395_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_13_fu_444_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_14_fu_483_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_1_fu_152_p4 = {{crc32_context_i[15:8]}};

assign trunc_ln72_2_fu_161_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_3_fu_210_p4 = {{xor_ln72_1_fu_194_p2[15:8]}};

assign trunc_ln72_4_fu_220_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_5_fu_269_p4 = {{xor_ln72_3_fu_253_p2[15:8]}};

assign trunc_ln72_6_fu_279_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_7_fu_328_p4 = {{xor_ln72_5_fu_312_p2[15:8]}};

assign trunc_ln72_8_fu_338_p1 = crc32_tab_q0[7:0];

assign trunc_ln72_9_fu_385_p4 = {{xor_ln72_7_fu_369_p2[15:8]}};

assign trunc_ln72_fu_119_p1 = crc32_context_i[7:0];

assign trunc_ln72_s_fu_434_p4 = {{xor_ln72_9_fu_418_p2[15:8]}};

assign trunc_ln99_fu_111_p1 = val_r[7:0];

assign xor_ln100_fu_165_p2 = (trunc_ln72_2_fu_161_p1 ^ trunc_ln72_1_fu_152_p4);

assign xor_ln101_fu_224_p2 = (trunc_ln72_4_fu_220_p1 ^ trunc_ln72_3_fu_210_p4);

assign xor_ln102_fu_283_p2 = (trunc_ln72_6_fu_279_p1 ^ trunc_ln72_5_fu_269_p4);

assign xor_ln103_fu_342_p2 = (trunc_ln72_8_fu_338_p1 ^ trunc_ln72_7_fu_328_p4);

assign xor_ln104_fu_399_p2 = (trunc_ln72_9_fu_385_p4 ^ trunc_ln72_11_fu_395_p1);

assign xor_ln105_fu_448_p2 = (trunc_ln72_s_fu_434_p4 ^ trunc_ln72_13_fu_444_p1);

assign xor_ln106_fu_487_p2 = (trunc_ln72_14_fu_483_p1 ^ trunc_ln72_10_fu_473_p4);

assign xor_ln72_10_fu_405_p2 = (xor_ln104_fu_399_p2 ^ select_ln103_reg_605);

assign xor_ln72_11_fu_467_p2 = (zext_ln72_13_fu_464_p1 ^ reg_107);

assign xor_ln72_12_fu_454_p2 = (xor_ln105_fu_448_p2 ^ select_ln103_reg_605);

assign xor_ln72_13_fu_516_p2 = (zext_ln72_14_fu_512_p1 ^ reg_107);

assign xor_ln72_14_fu_493_p2 = (xor_ln106_fu_487_p2 ^ select_ln103_reg_605);

assign xor_ln72_15_fu_536_p2 = (zext_ln72_15_fu_532_p1 ^ crc32_tab_q0);

assign xor_ln72_1_fu_194_p2 = (zext_ln72_8_fu_191_p1 ^ reg_107);

assign xor_ln72_2_fu_180_p2 = (xor_ln100_fu_165_p2 ^ b_assign_1_fu_171_p4);

assign xor_ln72_3_fu_253_p2 = (zext_ln72_9_fu_250_p1 ^ reg_107);

assign xor_ln72_4_fu_239_p2 = (xor_ln101_fu_224_p2 ^ b_assign_2_fu_230_p4);

assign xor_ln72_5_fu_312_p2 = (zext_ln72_10_fu_309_p1 ^ reg_107);

assign xor_ln72_6_fu_298_p2 = (xor_ln102_fu_283_p2 ^ b_assign_3_fu_289_p4);

assign xor_ln72_7_fu_369_p2 = (zext_ln72_11_fu_366_p1 ^ reg_107);

assign xor_ln72_8_fu_355_p2 = (xor_ln103_fu_342_p2 ^ select_ln103_fu_348_p3);

assign xor_ln72_9_fu_418_p2 = (zext_ln72_12_fu_415_p1 ^ reg_107);

assign xor_ln72_fu_133_p2 = (trunc_ln99_fu_111_p1 ^ trunc_ln72_fu_119_p1);

assign zext_ln72_10_fu_309_p1 = lshr_ln72_2_reg_590;

assign zext_ln72_11_fu_366_p1 = lshr_ln72_3_reg_600;

assign zext_ln72_12_fu_415_p1 = lshr_ln72_4_reg_617;

assign zext_ln72_13_fu_464_p1 = lshr_ln72_5_reg_627;

assign zext_ln72_14_fu_512_p1 = lshr_ln72_6_fu_503_p4;

assign zext_ln72_15_fu_532_p1 = lshr_ln72_7_fu_522_p4;

assign zext_ln72_1_fu_186_p1 = xor_ln72_2_fu_180_p2;

assign zext_ln72_2_fu_245_p1 = xor_ln72_4_fu_239_p2;

assign zext_ln72_3_fu_304_p1 = xor_ln72_6_fu_298_p2;

assign zext_ln72_4_fu_361_p1 = xor_ln72_8_fu_355_p2;

assign zext_ln72_5_fu_410_p1 = xor_ln72_10_fu_405_p2;

assign zext_ln72_6_fu_459_p1 = xor_ln72_12_fu_454_p2;

assign zext_ln72_7_fu_498_p1 = xor_ln72_14_fu_493_p2;

assign zext_ln72_8_fu_191_p1 = lshr_ln_reg_560;

assign zext_ln72_9_fu_250_p1 = lshr_ln72_1_reg_580;

assign zext_ln72_fu_139_p1 = xor_ln72_fu_133_p2;

endmodule //transparent_crc
